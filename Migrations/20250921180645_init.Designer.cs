// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrakingCar.Data;

#nullable disable

namespace TrakingCar.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250921180645_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrakingCar.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UniqueID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fullname");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("number");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("RToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("R_Token");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role");

                    b.Property<bool?>("Statuse")
                        .HasColumnType("bit")
                        .HasColumnName("statuse");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("TrakingCar.Models.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UniqueID");

                    b.Property<Guid?>("CarId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CarId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("locationId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("LocationId");

                    b.ToTable("Attachment", (string)null);
                });

            modelBuilder.Entity("TrakingCar.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UniqueID");

                    b.Property<string>("BodyCondition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bodyCondition");

                    b.Property<string>("CarNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("carNumber");

                    b.Property<string>("CarType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("carType");

                    b.Property<string>("ChassisNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ChassisNumber");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("locationId");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<Guid?>("OwnershipId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ownershipId");

                    b.Property<DateTime?>("ReceiptDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("receiptDate");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<string>("TrackingCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("trackingCode");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnershipId");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("TrakingCar.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UniqueID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detailes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("detailes");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("TrakingCar.Models.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogEntries", (string)null);
                });

            modelBuilder.Entity("TrakingCar.Models.Ownership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UniqueID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detailes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("detailes");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("OwnerShip", (string)null);
                });

            modelBuilder.Entity("TrakingCar.Models.Attachment", b =>
                {
                    b.HasOne("TrakingCar.Models.Car", "Car")
                        .WithMany("Attachments")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TrakingCar.Models.Location", "Location")
                        .WithMany("Attachments")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Car");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TrakingCar.Models.Car", b =>
                {
                    b.HasOne("TrakingCar.Models.Location", "Location")
                        .WithMany("Cars")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TrakingCar.Models.Ownership", "Ownership")
                        .WithMany("Cars")
                        .HasForeignKey("OwnershipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("Ownership");
                });

            modelBuilder.Entity("TrakingCar.Models.Car", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("TrakingCar.Models.Location", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Cars");
                });

            modelBuilder.Entity("TrakingCar.Models.Ownership", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
